---
- name: 'Install nodes'
  hosts: 'nodes'
  gather_facts: no
  become: yes
  tags:
    - 'install'
    - 'never'
  handlers:
    - import_tasks: 'handlers/main.yml'
  tasks:
    - name: 'Create local repo mountpoint'
      register: 'reg_mkdir'
      vars:
        e_readonly: 'Read-only file system'
      failed_when:
        - 'reg_mkdir.rc != 0'
        - 'e_readonly not in reg_mkdir.module_stdout'
      file:
        path: '/mnt/disc'
        state: 'directory'
        mode: '0000'

    - name: 'Add local repo mount to fstab'
      lineinfile:
        path: '/etc/fstab'
        line: '/dev/sr0  /mnt/disc  iso9660  ro  0  0'

    - name: 'Mount local repo image'
      register: 'reg_mount'
      vars:
        e_notfound: "can't find in /etc/fstab."
        e_already: 'already mounted'
      changed_when:
        - 'reg_mount.rc != 0'
        - 'e_already not in reg_mount.stderr'
      failed_when:
        - 'reg_mount.rc != 0'
        - 'e_notfound in reg_mount.stderr'
      command:
        argv:
          - '/bin/mount'
          - '/mnt/disc'

    - name: 'Install keepalived'
      package:
        name: 'keepalived'

    - name: 'Configure keepalived'
      notify:
        - 'Restart keepalived'
      loop:
        - '/etc/keepalived/keepalived.conf'
      template:
        src: '{{ item[1:] }}.j2'
        dest: '{{ item }}'

    - name: 'Copy legacy RPMs'
      loop:
        - 'iptables-libs-1.6.2-2.fc28.x86_64.rpm'
        - 'iptables-1.6.2-2.fc28.x86_64.rpm'
      copy:
        src: 'rpms/{{ item }}'
        dest: '/tmp/'

    # TODO: failed_when/changed_when
    - name: 'Install legacy RPMs'
      register: 'reg_iptables'
      vars:
        legacy_rpms:
          - '/tmp/iptables-libs-1.6.2-2.fc28.x86_64.rpm'
          - '/tmp/iptables-1.6.2-2.fc28.x86_64.rpm'
        command:
          - '/bin/yum'
          - 'localinstall'
          - '--allowerasing'
          - '--nogpgcheck'
          - '-y'
      command:
        argv: '{{ command + legacy_rpms }}'

    - name: 'Reboot'
      when: 'reg_iptables is changed'
      reboot:

- name: 'Bootstrap masters'
  hosts: 'k3s_masters'
  gather_facts: no
  become: yes
  tags:
    - 'bootstrap'
    - 'never'
  handlers:
    - import_tasks: 'handlers/main.yml'
  vars:
    token_file: '/etc/k3s-token-file'
    # /tmp and /var/tmp are mounted noexec so use /run
    k3s_install_script: '/run/install_k3s.sh'
  environment:
    K3S_TOKEN_FILE: '{{ token_file }}'
  tasks:
    - name: 'Create random token file'
      copy:
        content: '{{ (now().microsecond ~ inventory_hostname) | password_hash("sha256") | b64encode }}'
        dest: '{{ token_file }}'

    - name: 'Copy install script'
      loop:
        - '{{ k3s_install_script }}'
      copy:
        src: '{{ item[1:] }}'
        dest: '{{ item }}'
        mode: '0755'

    # The k3s project has taken the unusual decision to host built
    # binaries without any wrapper or compression at all. You just
    # download the actual binary and away you go. This is possible
    # since Go binaries famously have no dependencies.

    # This made me feel slimy and naked so I wrapped it up in a
    # tarball. It didn't even have a version number attached.
    - name: 'Unarchive the binary'
      unarchive:
        src: 'binaries/k3s-v1.28.4+k3s2.tgz'
        dest: '/usr/local/bin/'

    - name: 'Permission the binary'
      file:
        path: '/usr/local/bin/k3s'
        mode: '0755'

    # Apparently the next step also removes the binary
    - name: 'Backup the binary'
      copy:
        remote_src: yes
        src: '/usr/local/bin/k3s'
        dest: '/usr/local/bin/k3s.bak'

    # TODO: make safe with failed_when
    - name: 'Remove old data'
      register: 'reg_remove'
      vars:
        e_notfound: 'No such file or directory'
      failed_when:
        - 'reg_remove.rc > 0'
        - 'e_notfound not in reg_remove.msg'
      command: '/usr/local/bin/k3s-uninstall.sh'

    # ffs
    - name: 'Restore the backup'
      when: 'reg_remove is changed'
      copy:
        remote_src: yes
        src: '/usr/local/bin/k3s.bak'
        dest: '/usr/local/bin/k3s'

    # hmm, ends with error, api server not starting?
    - name: 'Run install script'
      environment:
        K3S_KUBECONFIG_MODE: '644'
        INSTALL_K3S_SKIP_DOWNLOAD: 'true'
        INSTALL_K3S_EXEC: 'server --disable traefik --disable=servicelb --disable=traefik --flannel-backend=none --disable-network-policy --cluster-cidr=192.168.0.0/16'
      command:
        argv:
          - '{{ k3s_install_script }}'
          - '--cluster-init'
          - '--kube-apiserver-arg=feature-gates=RemoveSelfLink=false'

    - name: 'Reboot'
      reboot:
...
